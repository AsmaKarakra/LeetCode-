"""

448. Find All Numbers Disappeared in an Array

Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2

Input: nums = [1,1]
Output: [2]

Assumptions: 
  - Integers can be postive only since we start at 1
  - The values in the range are not distinct and can be repeated 
  - The array is not sorted in the input 
  - There will always be missing indexes in the range of the array 
  - Assume returned list is already in memory (it wont take up extra space) 
  
  
  
  Method 1: Sort the array and check is values are in the range of length of array. Append the values not in our range. 
  
  Time: O(n(log(n)) | Space: O(n)
  
  Method 2: Store range in hashtable and check if numbers in hashtable as we traverse through array. If not in hashtable, append to new array. 
  
  Time: O(n) | Space O(n) 
  
  Follow Up question: Assuming that the returned array is stored in memory (meaning, it doesnt take any extra space, how could we solve this problem in O(n) time?
  
   - Traverse through array and mark all visited values as negative numbers. After that, traverse through positon of indices again. If the index is greater than zero, 
   this means that we havent seen it yet, so append it to array to return missing numbers. 
  
""" 

#Method 2 

class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        n = len(nums)
        arr = []
        set = {}
        
        for idx in nums:
            set[idx] = True
        
        for i in range(1, n+1):
            if i in set:
                continue 
            else:
                arr.append(i)
        return arr 
